
Not coincidentally, these are precisely the data you will pass
as constructor input arguments when creating an instance of
:class:`meep.adjoint.`OptimizationProblem`
to begin a :py:mod:`meep.adjoint` session, as discussed in 
detail at the top of the following page.
    
## Mechanics of :py:mod:`meep` design optimization

With all that by way of background, here's a quick rundown of the 
process you'll follow to optimize a geometry in `meep.adjoint.`

1. You write a python script that implements a subclass of
   `OptimizationProblem` (an abstract base class in `meep.adjoint`)
   to describe your specific problem. In particular, your 
   class must override the following two pure virtual methods
   in `OptimizationProblem:`

??? summary "`init_problem`: One-time initialization"
    Inputs an `args` structure describing command-line options
    and returns a 5-tuple
    ```py3 
       fstr, objective_regions, extra_regions, design_region, basis
    ```
    defining your objective function, the objective regions on which 
    its inputs (the objective variables) are defined, the design region,
    and an expansion basis.


??? summary "`create_sim`: Instantiation of design-dependent geometries"
    Inputs a vector of expansion coefficients `beta_vector` and 
    returns a `meep.simulation` describing a geometry with the 
    corresponding spatially-varying permittivity.


2. You run computations on your geometry either by executing your
   script from the shell with command-line options:

```bash
  % python HoleyWaveguide.py --beta 0 2.3 --eval_gradient
```

or equivalently from a python script or console by 
calling its `run()` method:

```py3
  from HoleyWaveguide import HoleyWaveguide

  HW=HoleyWaveguide(cmdline='--beta 0 2.3 --eval_gradient')
  HW.run()
```

The actual calculations that may be run in this way
range from a single non-iterative computation of the objective
function and (optionally) its gradient at a given set of design-variable
values, to `full-blown iterative design optimization <CrossRouterExample_>`_.
